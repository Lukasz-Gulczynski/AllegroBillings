// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AllegroBillings.Data.Migrations
{
    [DbContext(typeof(BillingContext))]
    [Migration("20240628100543_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("AllegroBillings.Data.Models.Billing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("OrderId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("AllegroBillings.Data.Models.Offer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("AllegroBillings.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("AllegroBillings.Data.Models.OrderTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ErpOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("OrderTables");
                });

            modelBuilder.Entity("AllegroBillings.Data.Models.Billing", b =>
                {
                    b.HasOne("AllegroBillings.Data.Models.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId");

                    b.HasOne("AllegroBillings.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.OwnsOne("AllegroBillings.Data.Models.Balance", "Balance", b1 =>
                        {
                            b1.Property<string>("BillingId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("BillingId");

                            b1.ToTable("Billings");

                            b1.WithOwner()
                                .HasForeignKey("BillingId");
                        });

                    b.OwnsOne("AllegroBillings.Data.Models.BillingType", "Type", b1 =>
                        {
                            b1.Property<string>("BillingId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("BillingId");

                            b1.ToTable("Billings");

                            b1.WithOwner()
                                .HasForeignKey("BillingId");
                        });

                    b.OwnsOne("AllegroBillings.Data.Models.BillingValue", "Value", b1 =>
                        {
                            b1.Property<string>("BillingId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("BillingId");

                            b1.ToTable("Billings");

                            b1.WithOwner()
                                .HasForeignKey("BillingId");
                        });

                    b.OwnsOne("AllegroBillings.Data.Models.Tax", "Tax", b1 =>
                        {
                            b1.Property<string>("BillingId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Annotation")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Percentage")
                                .HasColumnType("TEXT");

                            b1.HasKey("BillingId");

                            b1.ToTable("Billings");

                            b1.WithOwner()
                                .HasForeignKey("BillingId");
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Order");

                    b.Navigation("Tax")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();

                    b.Navigation("Value")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
